# p = plotdat %>%
#   group_by(subregion) %>%
#   plot_ly(x = ~long, y = ~lat,
#           color = ~fillcol,
#           colors = viridis::plasma(50, begin=1, end=0),
#           text = ~subregion, hoverinfo = 'text') %>%
#   add_polygons(line = list(width = 0.4)) %>%
#   layout(title = "% with Maximum of HS Education in Michigan")
sub_reg_data_mich <- plotdat %>% group_by(subregion)
map_p2 <- ggplot(data = sub_reg_data_mich, # the input data
aes(x = long, y = lat, fill = fillcol, group = group)) + # define variables
geom_polygon() + # plot the boroughs
geom_path(colour="black", lwd=0.05) + # borough borders
coord_equal() + # fixed x and y scales
scale_fill_viridis(option="magma", discrete = F, direction = 1) +
theme_fivethirtyeight()
#scale_fill_brewer(palette = "RdBu") + # legend options
# theme(axis.text = element_blank(), # change the theme options
#       axis.title = element_blank(), # remove axis titles
#       axis.ticks = element_blank()) # remove axis ticks
map_p2
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
states_num <- c(26,27)
shp <- shp[shp$STATEFP %in% states_num, ]
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names$stname <- tolower(states_names$stname)
states_names <- states_names[st %in% states_num]
colnames(states_names) <- c('stname', 'STATEFP', 'stusps')
## select michigan, and convert % to proportion
mich_df <-  shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
nb <- spdep::poly2nb(shp, row.names = mich_df$GEOID)
names(nb) <- attr(nb, "region.id")
ctrl <- gam.control(nthreads = 6) # use 6 parallel threads, reduce if fewer physical CPU cores
gam_mrf <- gam(hsd ~ s(GEOID, bs = 'mrf', xt = list(nb = nb)), # define MRF smooth
data = mich_df,
method = 'REML',
family = betar,  # fit a beta regression
control = ctrl)
summary(gam_mrf)
mich_df = mich_df %>%
mutate(fit = predict(gam_mrf, type='response'))
mich_df = setDT(mich_df)
states_names$STATEFP <- as.factor(states_names$STATEFP)
mich_df = states_names[mich_df, on = 'STATEFP']
plotdat = map_data("county", states_names$stname) %>%
left_join(mich_df, by = c('region' = 'stname', 'subregion' = 'county'))
# %>%
#   mutate(fillcol = cut(fit, breaks=seq(.25, .45, by = .025)))
# p = plotdat %>%
#   group_by(subregion) %>%
#   plot_ly(x = ~long, y = ~lat,
#           color = ~fillcol,
#           colors = viridis::plasma(50, begin=1, end=0),
#           text = ~subregion, hoverinfo = 'text') %>%
#   add_polygons(line = list(width = 0.4)) %>%
#   layout(title = "% with Maximum of HS Education in Michigan")
sub_reg_data_mich <- plotdat %>% group_by(subregion)
map_p2 <- ggplot(data = sub_reg_data_mich, # the input data
aes(x = long, y = lat, fill = fit, group = group)) +
#aes(x = long, y = lat, fill = fillcol, group = group)) + # define variables
geom_polygon() + # plot the boroughs
geom_path(colour="black", lwd=0.05) + # borough borders
coord_equal() + # fixed x and y scales
scale_fill_viridis(option="magma", discrete = F, direction = 1) +
theme_fivethirtyeight()
#scale_fill_brewer(palette = "RdBu") + # legend options
# theme(axis.text = element_blank(), # change the theme options
#       axis.title = element_blank(), # remove axis titles
#       axis.ticks = element_blank()) # remove axis ticks
map_p2
library(scico)
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
states_num <- c(26,27)
shp <- shp[shp$STATEFP %in% states_num, ]
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names$stname <- tolower(states_names$stname)
states_names <- states_names[st %in% states_num]
colnames(states_names) <- c('stname', 'STATEFP', 'stusps')
## select michigan, and convert % to proportion
mich_df <-  shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
nb <- spdep::poly2nb(shp, row.names = mich_df$GEOID)
names(nb) <- attr(nb, "region.id")
ctrl <- gam.control(nthreads = 6) # use 6 parallel threads, reduce if fewer physical CPU cores
gam_mrf <- gam(hsd ~ s(GEOID, bs = 'mrf', xt = list(nb = nb)), # define MRF smooth
data = mich_df,
method = 'REML',
family = betar,  # fit a beta regression
control = ctrl)
summary(gam_mrf)
mich_df = mich_df %>%
mutate(fit = predict(gam_mrf, type='response'))
mich_df = setDT(mich_df)
states_names$STATEFP <- as.factor(states_names$STATEFP)
mich_df = states_names[mich_df, on = 'STATEFP']
plotdat = map_data("county", states_names$stname) %>%
left_join(mich_df, by = c('region' = 'stname', 'subregion' = 'county'))
# %>%
#   mutate(fillcol = cut(fit, breaks=seq(.25, .45, by = .025)))
# p = plotdat %>%
#   group_by(subregion) %>%
#   plot_ly(x = ~long, y = ~lat,
#           color = ~fillcol,
#           colors = viridis::plasma(50, begin=1, end=0),
#           text = ~subregion, hoverinfo = 'text') %>%
#   add_polygons(line = list(width = 0.4)) %>%
#   layout(title = "% with Maximum of HS Education in Michigan")
sub_reg_data_mich <- plotdat %>% group_by(subregion)
map_p2 <- ggplot(data = sub_reg_data_mich, # the input data
aes(x = long, y = lat, fill = fit, group = group)) +
#aes(x = long, y = lat, fill = fillcol, group = group)) + # define variables
geom_polygon() + # plot the boroughs
geom_path(colour="black", lwd=0.05) + # borough borders
coord_equal() + # fixed x and y scales
scale_fill_scico(palette = "roma") +
#scale_fill_viridis(option="magma", discrete = F, direction = 1) +
theme_fivethirtyeight()
#scale_fill_brewer(palette = "RdBu") + # legend options
# theme(axis.text = element_blank(), # change the theme options
#       axis.title = element_blank(), # remove axis titles
#       axis.ticks = element_blank()) # remove axis ticks
map_p2
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
states_num <- c(1,4:6, 8:13, 16:42, 44:51, 53:56)
shp <- shp[shp$STATEFP %in% states_num, ]
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names$stname <- tolower(states_names$stname)
states_names <- states_names[st %in% states_num]
colnames(states_names) <- c('stname', 'STATEFP', 'stusps')
## select michigan, and convert % to proportion
mich_df <-  shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
nb <- spdep::poly2nb(shp, row.names = mich_df$GEOID)
names(nb) <- attr(nb, "region.id")
ctrl <- gam.control(nthreads = 6) # use 6 parallel threads, reduce if fewer physical CPU cores
gam_mrf <- gam(hsd ~ s(GEOID, bs = 'mrf', k = 300, xt = list(nb = nb)), # define MRF smooth
data = mich_df,
method = 'REML',
family = betar,  # fit a beta regression
control = ctrl)
summary(gam_mrf)
mich_df = mich_df %>%
mutate(fit = predict(gam_mrf, type='response'))
mich_df = setDT(mich_df)
states_names$STATEFP <- as.factor(states_names$STATEFP)
mich_df = states_names[mich_df, on = 'STATEFP']
plotdat = map_data("county", states_names$stname) %>%
left_join(mich_df, by = c('region' = 'stname', 'subregion' = 'county')) %>%
mutate(fillcol = cut(fit, breaks=seq(.25, .45, by = .025)))
# p = plotdat %>%
#   group_by(subregion) %>%
#   plot_ly(x = ~long, y = ~lat,
#           color = ~fillcol,
#           colors = viridis::plasma(50, begin=1, end=0),
#           text = ~subregion, hoverinfo = 'text') %>%
#   add_polygons(line = list(width = 0.4)) %>%
#   layout(title = "% with Maximum of HS Education in Michigan")
sub_reg_data_mich <- plotdat %>% group_by(subregion)
map_p2 <- ggplot(data = sub_reg_data_mich, # the input data
aes(x = long, y = lat, fill = fillcol, group = group)) + # define variables
geom_polygon() + # plot the boroughs
geom_path(colour="black", lwd=0.05) + # borough borders
coord_equal() + # fixed x and y scales
scale_fill_scico(palette = "roma") +
#scale_fill_viridis(option="magma", discrete = T, direction = 1) +
theme_fivethirtyeight()
#scale_fill_brewer(palette = "RdBu") + # legend options
# theme(axis.text = element_blank(), # change the theme options
#       axis.title = element_blank(), # remove axis titles
#       axis.ticks = element_blank()) # remove axis ticks
map_p2
plotdat = map_data("county", states_names$stname) %>%
left_join(mich_df, by = c('region' = 'stname', 'subregion' = 'county'))
sub_reg_data_mich <- plotdat %>% group_by(subregion)
map_p2 <- ggplot(data = sub_reg_data_mich, # the input data
aes(x = long, y = lat, fill = fillcol, group = group)) + # define variables
geom_polygon() + # plot the boroughs
geom_path(colour="black", lwd=0.05) + # borough borders
coord_equal() + # fixed x and y scales
scale_fill_scico(palette = "roma") +
#scale_fill_viridis(option="magma", discrete = T, direction = 1) +
theme_fivethirtyeight()
#scale_fill_brewer(palette = "RdBu") + # legend options
# theme(axis.text = element_blank(), # change the theme options
#       axis.title = element_blank(), # remove axis titles
#       axis.ticks = element_blank()) # remove axis ticks
map_p2
map_p2 <- ggplot(data = sub_reg_data_mich, # the input data
aes(x = long, y = lat, fill = fit, group = group)) + # define variables
geom_polygon() + # plot the boroughs
geom_path(colour="black", lwd=0.05) + # borough borders
coord_equal() + # fixed x and y scales
scale_fill_scico(palette = "roma") +
#scale_fill_viridis(option="magma", discrete = T, direction = 1) +
theme_fivethirtyeight()
#scale_fill_brewer(palette = "RdBu") + # legend options
# theme(axis.text = element_blank(), # change the theme options
#       axis.title = element_blank(), # remove axis titles
#       axis.ticks = element_blank()) # remove axis ticks
map_p2
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
states_num <- c(26,27)
shp <- shp[shp$STATEFP %in% states_num, ]
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names$stname <- tolower(states_names$stname)
states_names <- states_names[st %in% states_num]
colnames(states_names) <- c('stname', 'STATEFP', 'stusps')
## select michigan, and convert % to proportion
mich_df <-  shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
nb <- spdep::poly2nb(shp, row.names = mich_df$GEOID)
names(nb) <- attr(nb, "region.id")
ctrl <- gam.control(nthreads = 6) # use 6 parallel threads, reduce if fewer physical CPU cores
gam_mrf <- gam(hsd ~ s(GEOID, bs = 'mrf', xt = list(nb = nb)), # define MRF smooth
data = mich_df,
method = 'REML',
family = betar,  # fit a beta regression
control = ctrl)
summary(gam_mrf)
mich_df = mich_df %>%
mutate(fit = predict(gam_mrf, type='response'))
mich_df = setDT(mich_df)
states_names$STATEFP <- as.factor(states_names$STATEFP)
mich_df = states_names[mich_df, on = 'STATEFP']
plotdat = map_data("county", states_names$stname) %>%
left_join(mich_df, by = c('region' = 'stname', 'subregion' = 'county'))
# %>%
#   mutate(fillcol = cut(fit, breaks=seq(.25, .45, by = .025)))
# p = plotdat %>%
#   group_by(subregion) %>%
#   plot_ly(x = ~long, y = ~lat,
#           color = ~fillcol,
#           colors = viridis::plasma(50, begin=1, end=0),
#           text = ~subregion, hoverinfo = 'text') %>%
#   add_polygons(line = list(width = 0.4)) %>%
#   layout(title = "% with Maximum of HS Education in Michigan")
sub_reg_data_mich <- plotdat %>% group_by(GEOID)
map_p2 <- ggplot(data = sub_reg_data_mich, # the input data
aes(x = long, y = lat, fill = fit, group = group)) +
#aes(x = long, y = lat, fill = fillcol, group = group)) + # define variables
geom_polygon() + # plot the boroughs
geom_path(colour="black", lwd=0.05) + # borough borders
coord_equal() + # fixed x and y scales
scale_fill_scico(palette = "roma") +
#scale_fill_viridis(option="magma", discrete = F, direction = 1) +
theme_fivethirtyeight()
#scale_fill_brewer(palette = "RdBu") + # legend options
# theme(axis.text = element_blank(), # change the theme options
#       axis.title = element_blank(), # remove axis titles
#       axis.ticks = element_blank()) # remove axis ticks
map_p2
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names$stname <- tolower(states_names$stname)
states_names <- states_names[st %in% states_num]
colnames(states_names) <- c('stname', 'STATEFP', 'stusps')
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
states_num <- c(1,4:6, 8:13, 16:42, 44:51, 53:56)
shp <- shp[shp$STATEFP %in% states_num, ]
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names$stname <- tolower(states_names$stname)
states_names <- states_names[st %in% states_num]
colnames(states_names) <- c('stname', 'STATEFP', 'stusps')
states_names
mich_df <-  shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
nb <- spdep::poly2nb(shp, row.names = mich_df$GEOID)
names(nb) <- attr(nb, "region.id")
ctrl <- gam.control(nthreads = 6) # use 6 parallel threads, reduce if fewer physical CPU cores
gam_mrf <- gam(hsd ~ s(GEOID, bs = 'mrf', k = 300, xt = list(nb = nb)), # define MRF smooth
data = mich_df,
method = 'REML',
family = betar,  # fit a beta regression
control = ctrl)
summary(gam_mrf)
mich_df = mich_df %>%
mutate(fit = predict(gam_mrf, type='response'))
mich_df = setDT(mich_df)
head(mich_df)
head(mich_df, 26)
head(mich_df[STATEFP = 26,])
head(mich_df[STATEFP == 26,])
summary(gam_mrf)
states_names$STATEFP <- as.factor(states_names$STATEFP)
mich_df_2 = states_names[mich_df, on = 'STATEFP']
head(mich_df_2[STATEFP == 26,])
states_names
head(mich_df_2[STATEFP == 6,])
head(mich_df[STATEFP == 6,])
dum <- shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
head(dum)
head(dum[STATEFP == 6])
setDT(dum)
head(dum[STATEFP == 6])
table(dum$STATEFP)
states_num
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
dum <- shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
head(dum[STATEFP == 6])
setDT(dum)
head(dum[STATEFP == 6])
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
states_num <- c(1,4:6, 8:13, 16:42, 44:51, 53:56)
shp <- shp[shp$STATEFP %in% states_num, ]
states_names <- fread('D:/Users/EUDZ040/R/002_Zoning/Data files/us-state-ansi-fips.csv')
states_names$stname <- tolower(states_names$stname)
states_names <- states_names[st %in% states_num]
colnames(states_names) <- c('stname', 'STATEFP', 'stusps')
dum <- shp %>%   # add other FIPS codes as desired
as.data.frame() %>%
droplevels() %>%
mutate(hsd = hs_pct / 100,
county = stringr::str_replace(tolower(NAME), pattern='\\.', ''),
county = factor(county))
setDT(dum)
head(dum[STATEFP == 6])
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/002_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/02_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
knitr::opts_chunk$set(echo = TRUE)
# Maps and shapefiles
library(spdep)
library(maps)
library(maptools)
library(leaflet)
library(rgdal)
# Colors
library(viridis)
library(RColorBrewer)
library(scico)
# GAM
library(mgcv)
# data.table, what else ?
library(data.table)
# caret
library(caret)
# Tidyverse
library(tidyverse)
library(ggthemes)
library(plotly)
# Data path
# dir_path <- file.path("c:", "Users", "Thomas", "Belfius", "R",
#                       "Spatial stat test")
# setwd(dir_path)
# Assign the number of cores
library(parallel)
library(doParallel)
nbr_cores <- detectCores() - 1 # leave one core for the OS
cl <- makeCluster(nbr_cores)
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/02_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
shp <- rgdal::readOGR('D:/Users/EUDZ040/R/02_Zoning/Data files/us_county_hs_only/us_county_hs_only.shp')
sessionInfo()
set_config(use_proxy(url = "it000-surf.zone2.proxy.allianz:8080"))
knitr::opts_chunk$set(echo = TRUE)
# Maps and shapefiles
library(spdep)
library(maps)
library(maptools)
library(leaflet)
library(rgdal)
library(sf)
# Colors
library(viridis)
library(RColorBrewer)
library(scico)
# web scrapping
library(rvest)
library(httr)
# GAM
library(mgcv)
# data.table, what else ?
library(data.table)
library(rio)
# caret
library(caret)
# Tidyverse
library(magrittr)
library(tidyverse)
library(ggthemes)
library(plotly)
library(cowplot)
# Assign the number of cores
library(parallel)
library(doParallel)
nbr_cores <- detectCores() - 1 # leave one core for the OS
cl <- makeCluster(nbr_cores)
scico_pal_names <- scico::scico_palette_names()
set_config(use_proxy(url = "it000-surf.zone2.proxy.allianz:8080"))
getwd()
setwd("D:/Users/EUDZ040/R-open/003_Scientific_colors")
set_config(use_proxy(url = "it000-surf.zone2.proxy.allianz:8080"))
knitr::opts_chunk$set(echo = TRUE)
# Maps and shapefiles
library(spdep)
library(maps)
library(maptools)
library(leaflet)
library(rgdal)
library(sf)
# Colors
library(viridis)
library(RColorBrewer)
library(scico)
# web scrapping
library(rvest)
library(httr)
# GAM
library(mgcv)
# data.table, what else ?
library(data.table)
library(rio)
# caret
library(caret)
# Tidyverse
library(magrittr)
library(tidyverse)
library(ggthemes)
library(plotly)
library(cowplot)
# Assign the number of cores
library(parallel)
library(doParallel)
nbr_cores <- detectCores() - 1 # leave one core for the OS
cl <- makeCluster(nbr_cores)
scico_pal_names <- scico::scico_palette_names()
wine <- fread("/Data files/wine.csv", header=TRUE)
setwd("D:/Users/EUDZ040/R-open/003_Scientific_colors")
wine <- fread("~/Data files/wine.csv", header=TRUE)
setwd("D:/Users/EUDZ040/R-open/003_Scientific_colors/")
wine <- fread("~/Data files/wine.csv", header=TRUE)
wine <- fread("/Data files/wine.csv", header=TRUE)
wine <- fread("./Data files/wine.csv", header=TRUE)
setwd("D:/Users/EUDZ040/R-open/003_Scientific_colors")
wine <- fread("./Data files/wine.csv", header=TRUE)
getwd()
setwd("D:/Users/EUDZ040/R-open/003_Scientific_colors/")
getwd()
wine <- fread("./Data files/wine.csv", header=TRUE)
wine <- read.csv("./Data files/wine.csv", header=TRUE)
wine <- fread("Data files/wine.csv", header=TRUE)
wine <- fread("./Data files/wine.csv", header=TRUE)
wine <- fread("/Data files/wine.csv", header=TRUE)
?fread
path.expand("~/Data files/wine.csv")
getwd()
wine <- fread("../Data files/wine.csv", header=TRUE)
normalizePath(getwd())
file.path(normalizePath(getwd()), "Data files", "wine.csv")
file.path(getwd(), "Data files", "wine.csv")
wine_data_path = file.path(getwd(), "Data files", "wine.csv")
wine <- fread(wine_data_path, header=TRUE)
wine_data_path
wine <- fread("D:/Users/EUDZ040/R-open/003_Scientific_colors/Data/wine.csv", header=TRUE)
getwd()
wine_data_path
file.path(getwd(), "Data files", "wine.csv")
wine_data_path = file.path(getwd(), "Data files", "wine.csv")
wine_data_path
rm(wine_data_path)
wine_data_path = file.path(getwd(), "Data files", "wine.csv")
wine_data_path
wine <- fread(file.path(getwd(), "Data files", "wine.csv"), header=TRUE)
file.path(getwd(), "Data files", "wine.csv")
wine <- fread(file.path(getwd(), "Data files", "wine.csv"), header=TRUE)
file.path(getwd(), "Data files", "wine.csv")
getwd()
italy <- st_read("~/Data files/Limiti_2016_ED50_g/Reg2016_ED50_g/Reg2016_ED50_g.shp")
file.path(getwd(), "Data files", "wine.csv"),
file.path(getwd(), "Data files", "wine.csv")
file.path("Data files", "wine.csv")
getwd()
wine <- fread("Data/wine.csv", header=TRUE)
wine <- fread("Data/wine.csv", header=TRUE)
wine <- fread("Data/wine.csv", header=TRUE)
italy <- st_read("Data/Limiti_2016_ED50_g/Reg2016_ED50_g/Reg2016_ED50_g.shp")
unlink('Notebook/scientific_colors_cache', recursive = TRUE)
knit_with_parameters('D:/Users/EUDZ040/R-open/003_Scientific_colors/Notebook/scientific_colors.Rmd')
unlink('Notebook/scientific_colors_cache', recursive = TRUE)
